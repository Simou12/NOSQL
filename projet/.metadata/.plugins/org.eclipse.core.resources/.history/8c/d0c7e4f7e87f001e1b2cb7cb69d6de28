package qengine.program;

import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.apache.jena.sparql.algebra.op.OpReduced;
import org.eclipse.rdf4j.model.Statement;
import org.eclipse.rdf4j.rio.helpers.AbstractRDFHandler;

/**
 * Le RDFHandler intervient lors du parsing de données et permet d'appliquer un traitement pour chaque élément lu par le parseur.
 * 
 * <p>
 * Ce qui servira surtout dans le programme est la méthode {@link #handleStatement(Statement)} qui va permettre de traiter chaque triple lu.
 * </p>
 * <p>
 * À adapter/réécrire selon vos traitements.
 * </p>
 */

public final class MainRDFHandler extends AbstractRDFHandler {
	Map<Integer,String> listElement=new HashMap<>();
	String subject;
	String predicate; 
	String object;
	int index = 0;
	@SuppressWarnings("deprecation")
	@Override
	public void handleStatement(Statement st) {
		/*subject=st.getSubject().toString();
		predicate=st.getPredicate()+"";
		object=st.getObject().toString();
		if(!listElement.contains(subject)) listElement.add(subject);
		if(!listElement.contains(object)) listElement.add(object);
		if(!listElement.contains(predicate)) listElement.add(predicate);*/
		System.out.println("\n" + st.getSubject() + "\t " + st.getPredicate() + "\t " + st.getObject());
	}
	
}