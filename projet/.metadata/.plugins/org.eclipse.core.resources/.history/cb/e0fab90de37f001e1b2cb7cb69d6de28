package qengine.program;

import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.eclipse.rdf4j.model.Statement;
import org.eclipse.rdf4j.rio.helpers.AbstractRDFHandler;

/**
 * Le RDFHandler intervient lors du parsing de données et permet d'appliquer un traitement pour chaque élément lu par le parseur.
 * 
 * <p>
 * Ce qui servira surtout dans le programme est la méthode {@link #handleStatement(Statement)} qui va permettre de traiter chaque triple lu.
 * </p>
 * <p>
 * À adapter/réécrire selon vos traitements.
 * </p>
 */
class Element {
    private String str;
    private int num;

    public Element(String str, int num) {
        this.str = str;
        this.num = num;
    }

    public String getStr() {
        return str;
    }

    public int getNum() {
        return num;
    }
}

public final class MainRDFHandler extends AbstractRDFHandler {
	ArrayList<Element> subjectObjectList= new ArrayList<>();
	ArrayList<Element> predicateList=new ArrayList<>();
	String subject;
	String predicate; 
	String object;
	int index = 0;
	
	
	@SuppressWarnings("deprecation")
	@Override
	public void handleStatement(Statement st) {
		subject=st.getSubject().toString();
		predicate=st.getPredicate().toString();
		object=st.getObject().toString();
		if(predicateList.get) {
			
			
		}
		
		//System.out.println("\n" + st.getSubject() + "\t " + st.getPredicate() + "\t " + st.getObject());
	};
}